#!/bin/bash

# File: batchProcessing-0x04
# Description: Fetch Pokémon data in parallel, monitor jobs, and terminate stuck ones

pokemon_list=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")
output_dir="pokemon_data"
mkdir -p "$output_dir"

error_log="errors.txt"
: > "$error_log"  # Clear log

# Max time a job is allowed to run (in seconds)
MAX_WAIT=10

# Function to fetch one Pokémon
fetch_pokemon() {
    local pokemon=$1
    local file="$output_dir/${pokemon}.json"

    echo "Fetching $pokemon..."
    response=$(curl -s -w "%{http_code}" -o "$file" "https://pokeapi.co/api/v2/pokemon/$pokemon")
    status="${response:(-3)}"

    if [ "$status" = "200" ]; then
        echo "✅ Saved $pokemon to $file"
    else
        echo "❌ Failed to fetch $pokemon (Status: $status)"
        echo "$(date) - Failed to fetch $pokemon (Status: $status)" >> "$error_log"
        rm -f "$file"
    fi
}

# Start each fetch in background and track PIDs
declare -A pid_map

for pokemon in "${pokemon_list[@]}"; do
    fetch_pokemon "$pokemon" &
    pid=$!
    pid_map[$pid]=$pokemon
    echo "Started job for $pokemon with PID $pid"
done

# Display active jobs
echo ""
echo "📋 Running jobs:"
jobs

# Wait with timeout check
start_time=$(date +%s)

for pid in "${!pid_map[@]}"; do
    pokemon=${pid_map[$pid]}

    # Wait up to MAX_WAIT seconds for this PID
    while kill -0 "$pid" 2>/dev/null; do
        current_time=$(date +%s)
        elapsed=$((current_time - start_time))
        if [ $elapsed -gt $MAX_WAIT ]; then
            echo "⚠️ Timeout reached for $pokemon (PID $pid), killing..."
            kill "$pid"
            echo "$(date) - Killed $pokemon process (PID $pid) due to timeout" >> "$error_log"
            break
        fi
        sleep 1
    done
done

echo ""
echo "✅ All jobs finished or were handled."